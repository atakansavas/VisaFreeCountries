{"version":3,"sources":["components/data/data.geojson","components/data/dataStyles.js","components/data/visafreeCountries.js","components/map.js","components/sidebar/searchResult.js","components/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DefaultStyle","Style","fill","Fill","color","stroke","Stroke","width","text","Text","font","VisaFreeStyle","VisaFreeCountries","MapPage","props","this","Map","layers","TileLayer","source","OSM","projection","view","View","center","zoom","data","require","vectorSource","VectorSource","format","GeoJSON","url","vectorLayer","VectorLayer","setStyle","feature","countyName","get","indexOf","getText","setText","setSource","addLayer","PreapareMap","setTarget","PrepareData","class","style","height","id","Component","SearchResult","value","href","Sidebar","state","list","filtered","current","setState","e","newList","target","filter","item","lc","toLowerCase","includes","countryList","map","number","type","onChange","handleChange","bind","placeholder","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0520c3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.09311e26.geojson\";","import { Fill, Stroke, Style, Text } from 'ol/style';\n\n\nexport const DefaultStyle = new Style({\n    fill: new Fill({\n        color: 'rgba(116, 139, 133, 0.6)'\n    }),\n    stroke: new Stroke({\n        color: 'white',\n        width: 1\n    }),\n    text: new Text({\n        font: '12px Calibri,sans-serif',\n        fill: new Fill({\n            color: '#000'\n        }),\n        stroke: new Stroke({\n            color: '#fff',\n            width: 3\n        })\n    })\n});\n\nexport const VisaFreeStyle = new Style({\n    fill: new Fill({\n        color: 'rgba(158, 242, 141, 0.6)'\n    }),\n    stroke: new Stroke({\n        color: 'white',\n        width: 1\n    }),\n    text: new Text({\n        font: '12px Calibri,sans-serif',\n        fill: new Fill({\n            color: '#000'\n        }),\n        stroke: new Stroke({\n            color: '#fff',\n            width: 3\n        })\n    })\n});\n","export const VisaFreeCountries = ['Albania'\n    , 'Andorra'\n    , 'Argentina'\n    , 'Belize'\n    , 'Bolivia'\n    , 'Bosnia and Herzegovina'\n    , 'Brazil'\n    , 'Bulgaria'\n    , 'Colombia'\n    , 'Czech Republic'\n    , 'Denmark'\n    , 'Ecuador'\n    , 'El Salvador'\n    , 'Estonia'\n    , 'Finland'\n    // , 'France'\n    , 'Georgia'\n    , 'Turkey'\n    // , 'Germany'\n    // , 'Greece'\n    , 'Guatemala'\n    , 'Honduras'\n    , 'Hong Kong'\n    , 'Hungary'\n    , 'Iceland'\n    , 'Iran'\n    , 'Israel'\n    // , 'Italy'\n    , 'Japan'\n    , 'Jordan'\n    , 'Kazakhstan'\n    , 'Kosovo'\n    , 'Kuwait'\n    , 'Kyrgyzstan'\n    , 'Lebanon'\n    , 'Liechtenstein'\n    , 'Lithuania'\n    , 'Luxembourg'\n    , 'Malaysia'\n    , 'Moldova'\n    , 'Monaco'\n    , 'Montenegro'\n    , 'Morocco'\n    , 'New Zealand'\n    , 'Nicaragua'\n    , 'North Macedonia'\n    , 'Panama'\n    , 'Paraguay'\n    , 'Peru'\n    , 'Qatar'\n    , 'Romania'\n    , 'Saint Kitts and Nevis'\n    , 'San Marino'\n    , 'Serbia'\n    , 'Seychelles'\n    , 'Singapore'\n    , 'Slovakia'\n    , 'Slovenia'\n    , 'South Korea'\n    // , 'Sweden'\n    // , 'Switzerland'\n    , 'Tajikistan'\n    , 'Trinidad and Tobago'\n    , 'Tunisia'\n    , 'Ukraine'\n    , 'Uruguay'\n    , 'Uzbekistan'\n    , 'Vatican City'\n    , 'Venezuela'\n    , 'Russia'\n    , 'Azerbaijan'\n    , 'Belarus'\n    , 'Brunei'\n    , 'Costa Rica'\n    , 'Latvia'\n    , 'Macao'\n    , 'Mongolia'\n    , 'Thailand'\n    , 'Turkmenistan']\n\nexport default {\n    VisaFreeCountries,\n}","import React, { Component } from \"react\";\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { DefaultStyle, VisaFreeStyle } from './data/dataStyles';\nimport { VisaFreeCountries } from './data/visafreeCountries'\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport './map/map.css';\n\nclass MapPage extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n    }\n\n    PreapareMap() {\n        this.Map = new Map({\n            layers: [\n                new TileLayer({\n                    source: new OSM()\n                }),\n            ],\n            projection: 'EPSG:4326',\n            view: new View({\n                center: [0, 0],\n                zoom: 6\n            })\n        });\n    }\n\n    PrepareData() {\n\n        var data = require('./data/data.geojson'); // forward slashes will depend on the file location\n\n        var vectorSource = new VectorSource({\n            format: new GeoJSON(),\n            url: data\n        });\n\n        var vectorLayer = new VectorLayer();\n        vectorLayer.setStyle(function (feature) {\n            var countyName = feature.get('NAME');\n            if (VisaFreeCountries.indexOf(countyName) >= 0) {\n                VisaFreeStyle.getText().setText(feature.get('NAME_SORT'));\n                return VisaFreeStyle;\n\n            }\n            DefaultStyle.getText().setText(feature.get('NAME_SORT'));\n            return DefaultStyle;\n        });\n        vectorLayer.setSource(vectorSource);\n\n        this.Map.addLayer(vectorLayer);\n    }\n\n    componentDidMount() {\n        this.PreapareMap();\n        this.Map.setTarget('mapdiv');\n        this.PrepareData();\n    }\n\n    render() {\n        return (\n            <div class=\"container-fluid\">\n                <div style={{ width: '100%', height: 800 }} id='mapdiv'></div>\n            </div>\n        );\n    }\n}\n\nexport default MapPage;","import React from \"react\";\n\nexport function SearchResult(props) {\n    const value = props.value;\n    return (\n        <li>\n            <a href=\"#\">\n                <i class=\"fa fa-globe\"></i>\n                <span>\n                    {value}\n                </span>\n            </a>\n        </li>\n\n    );\n}\n","import React, { Component } from \"react\";\nimport { VisaFreeCountries } from './data/visafreeCountries'\nimport { SearchResult } from './sidebar/searchResult';\nimport './sidebar/sidebar.css'\n\nclass Sidebar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: VisaFreeCountries,\n            filtered: [],\n            current: []\n        };\n    }\n\n    componentDidMount() {\n        // this.getData();\n        // console.log(countryList);\n        this.setState({\n            current: this.state.list\n        })\n    }\n\n    handleChange(e) {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.state.list;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.state.list;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            current: newList\n        });\n    }\n\n    render() {\n        const countryList = this.state.current.map((number) =>\n            // Wrong! The key should have been specified here:\n            <SearchResult value={number} />\n        );\n\n        return (\n            <nav id=\"sidebar\" class=\"sidebar-wrapper\">\n                <div class=\"sidebar-content\">\n                    <div class=\"sidebar-brand\">\n                        <a href=\"#\">VizeFree</a>\n                    </div>\n                    <div class=\"sidebar-header\">\n                        <div class=\"user-info\">\n                            <span class=\"user-name\">Atakan\n                                <strong>Savas</strong>\n                            </span>\n                            <span class=\"user-role\">developer</span>\n                            <span class=\"user-status\">\n                                <i class=\"fa fa-circle\"></i>\n                                <span>Online</span>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div class=\"sidebar-search\">\n                        <div>\n                            <div class=\"input-group\">\n                                <input type=\"text\" class=\"form-control search-menu\" onChange={this.handleChange.bind(this)} placeholder=\"Search...\" />\n                                <div class=\"input-group-append\">\n                                    <span class=\"input-group-text\">\n                                        <i class=\"fa fa-search\" aria-hidden=\"true\"></i>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"sidebar-menu\">\n                        <ul>\n                            {countryList}\n                        </ul>\n                    </div>\n                </div>\n                {/* <div class=\"sidebar-footer\">\n                    <a href=\"#\">\n                        <i class=\"fa fa-bell\"></i>\n                        <span class=\"badge badge-pill badge-warning notification\">3</span>\n                    </a>\n                    <a href=\"#\">\n                        <i class=\"fa fa-envelope\"></i>\n                        <span class=\"badge badge-pill badge-success notification\">7</span>\n                    </a>\n                    <a href=\"#\">\n                        <i class=\"fa fa-cog\"></i>\n                        <span class=\"badge-sonar\"></span>\n                    </a>\n                    <a href=\"#\">\n                        <i class=\"fa fa-power-off\"></i>\n                    </a>\n                </div> */}\n            </nav>\n        )\n    }\n}\n\nexport default Sidebar;","import React from 'react';\nimport Map from \"./components/map\";\nimport Sidebar from './components/sidebar';\nimport './App.css';\n\nfunction App() {\n  return (\n\n\n    <div class=\"page-wrapper chiller-theme toggled\">\n\n      <Sidebar />\n      <main class=\"page-content\">\n        <Map />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}